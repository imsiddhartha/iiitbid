(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Table: missing required field: minbidprice"
p3
sS'layer'
p4
S'/home/siddharth/Desktop/Sace/Project/web2py/applications/iiitbid1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nfrom gluon.tools import Mail\n\ndef index():\n   return dict(form=auth.login())\n\n\n@auth.requires_login()\ndef admin_home():\n    if not auth.user.is_admin:\n        redirect(URL(\'user_home\'))\n    return dict()\n\ndef admin_complaints():\n    try:\n        if not auth.user.is_admin:\n            redirect(URL(\'public_home\'))\n    except AttributeError:\n            redirect(URL(\'public_home\'))\n    return dict()\n\ndef public_complaints():\n    form=SQLFORM(db.complain,fields=[\'Description\',\'Topic\',\'Email\',\'CurrentTime\'])\n    if form.process().accepted:\n        response.flash=\'Complain Registered. ID is: \'+ str(form.vars.id)\n    elif form.errors:\n        response.flash=\'Input has error\'\n    else:\n        response.flash=\'Please Fill the form\'\n    return dict(form=form)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef show_comp():\n    ele_list = db().select(db.complain.ALL)\n    return dict(ele_list=ele_list)\n\n@auth.requires(auth.user and not auth.user.is_admin)\ndef user_home():\n   return dict()\n\ndef aboutus():\n    return dict()\n\ndef search_comp():\n    form=FORM(\'Complain ID:\',\n    INPUT(_name=\'name\', requires=IS_INT_IN_RANGE(1,1000)),INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        session.a=request.vars.name\n        redirect(URL(\'search_comp1\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\n\ndef search_comp1():\n    id=int(session.a)\n    comp_list= db(db.complain.id==id).select(db.complain.ALL)\n    return dict(comp_list=comp_list)\n\ndef sitewise_comp():\n    ele_list = db().select(db.complain.Topic,distinct=True)\n    return dict(ele_list=ele_list)\n\ndef sitewise_compd():\n    t = request.args(0)\n    s_id=\'%\'+t+\'%\'\n    comp_list= db(db.complain.Topic.like(s_id)).select(db.complain.ALL)\n    return dict(comp_list=comp_list)\n\ndef search_solvcomp():\n    comp_list= db(db.complain.Status==\'Solved\').select(db.complain.ALL)\n    return dict(comp_list=comp_list)\n\ndef search_inpcomp():\n    comp_list= db(db.complain.Status==\'In-Process\').select(db.complain.ALL)\n    return dict(comp_list=comp_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef change_compstatus():\n    mid=request.args(0)\n    db(db.complain.id ==mid).update(Status=\'Solved\')\n    session.a=mid\n    ls= db(db.complain.id==mid).select(db.complain.Email)\n    for e in ls:\n        val=e.Email\n    #print val    \n    mail = Mail()\n    mail.settings.server = \'smtp.gmail.com:587\'\n    mail.settings.sender = \'donotreply.tms1@gmail.com\'\n    mail.settings.tls = True\n    mail.settings.login = \'donotreply.tms1@gmail.com:tushujain\'\n    msg=\'Your complaint with ID \'+ mid +\' has been resolved check on our portal\'\n    mail.send(val,\'Tender Management System\',msg)\n    redirect(URL(\'search_inpcomp\'))\n    return dict(mid=mid)\n\ndef public_home():\n    return dict()\n\n\n\n#@auth.requires(auth.user and auth.user.is_admin)\n@auth.requires_login()\ndef sell_an_item():\n    uid=auth.user.id\n    form=SQLFORM(db.item_info,fields=[\'Name\',\'Description\',\'minbidprice\',\'enddate\',\'CurrentTime\',\'category\',\'priority\',\'picture\'])\n    form.vars.seller_id=uid\n    if form.process().accepted:\n        response.flash=\'Site Created. ID is: \',form.vars.id\n        redirect(URL(\'show_activebids\'))\n    elif form.errors:\n        response.flash=\'Input has error\'\n    else:\n        response.flash=\'Please Fill the form\'\n    return dict(form=form)\n\ndef show_activebids():\n    ele_list= db(db.item_info.Status==\'Active\').select(db.item_info.ALL)\n    return dict(ele_list=ele_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminshow_activebids():\n    ele_list= db(db.item_info.Status==\'Active\').select(db.item_info.ALL)\n    return dict(ele_list=ele_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef show_pendingbids():\n    ele_list= db(db.item_info.Status==\'Confirmation Pending\').select(db.item_info.ALL,orderby=db.item_info.priority)\n    return dict(ele_list=ele_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef active_bidding():\n    sid=request.args(0)\n    db(db.item_info.id ==sid).update(Status=\'Active\')\n    redirect(URL(\'adminshow_activebids\'))\n    return dict(mid=mid)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef close_bidding():\n    sid=request.args(0)\n    ele_list=db(db.bidding.item_id==sid).select(db.bidding.ALL)\n    max=0\n    uid1=0\n    iname=""\n    for ed1 in ele_list:\n        if ed1.bid_amt>max:\n            max=ed1.bid_amt\n            uid1=ed1.UserID\n            iid=ed1.item_id\n    mail1=""\n    #iname=db(db.item_info.id ==iid).select(db.item_info.Name)\n    #mail1=db(db.auth_user.id ==uid1).select(db.auth_user.email)\n    db(db.item_info.id ==sid).update(sold_amt=max)\n    db(db.item_info.id ==sid).update(buyers_id=uid1)\n    db(db.item_info.id ==sid).update(Status=\'Bidding Closed\')\n    item_list=db(db.item_info.id==iid).select(db.item_info.ALL)\n    for e in item_list:\n        iname=e.Name\n        sellid=e.seller_id\n        pass\n    user_list=db(db.auth_user.id==uid1).select(db.auth_user.ALL)\n    for e in user_list:\n        mail1=e.email\n        pass\n    user_list=db(db.auth_user.id==sellid).select(db.auth_user.ALL)\n    for e in user_list:\n        smail1=e.email\n        pass\n    #print max\n    #print iname\n    #print mail1\n    #print uid1\n    from gluon.tools import Mail\n    mail = Mail()\n\n    ## configure email\n    mail = auth.settings.mailer\n    mail.settings.server = \'smtp.gmail.com:587\'\n    mail.settings.sender = \'iiitbid@gmail.com\'\n    mail.settings.login = \'iiitbid@gmail.com:dkwnbkuobbjatsol\'\n\n    ## configure auth policy\n    auth.settings.registration_requires_verification = False\n    auth.settings.registration_requires_approval = False\n    auth.settings.reset_password_requires_verification = True\n    string="Congratulations!!!! You Have Bidded for "+iname+" at price "+str(max)+" and It is sold to you.Please Pay and collect the Item"\n    mail.send(mail1,\'Item Sold To You\',string)\n    string="Congratulations!!!! Your Item "+iname+" has been sold at price "+str(max)+" to "+mail1\n    mail.send(smail1,\'Your Item Sold!!!\',string)\n    redirect(URL(\'adminshow_closedbids\'))\n    return dict(mid=mid)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminshow_closedbids():\n    ele_list= db(db.item_info.Status==\'Bidding Closed\').select(db.item_info.ALL)\n    return dict(ele_list=ele_list)\n\n\ndef show_progressbids():\n    ele_list= db(db.item_info.Status==\'Bidding Closed\').select(db.item_info.ALL)\n    return dict(ele_list=ele_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminshow_tender():\n    sid=request.args(0)\n    tend_list= db(db.bidding.item_id==sid).select(db.bidding.ALL,orderby=db.bidding.bid_amt)\n    return dict(tend_list=tend_list)\n\n@auth.requires(auth.user and not auth.user.is_admin)\ndef apply_for_bid():\n    sid=request.args(0)\n    uid=auth.user.id\n    ele=db(db.item_info.id==sid).select(db.item_info.ALL)\n    for e in ele:\n        siid=e.seller_id\n        minbid=e.minbidprice\n        pass\n    user_list= db(db.auth_user.id==uid).select(db.auth_user.ALL)\n    for u in user_list:\n        name=u.first_name\n    form=SQLFORM(db.bidding,fields=[\'Description\',\'bid_amt\',\'CurrentTime\'])\n    ele_list=db(db.item_info.id==sid).select(db.item_info.picture)\n    #\'RequiredDuration\',\n    form.vars.item_id = sid\n    form.vars.UserID=uid\n    form.vars.UName=name\n    if siid != uid:\n        if form.process().accepted:\n            print form.vars.bid_amt\n            print minbid\n            #if minbid < int(form.vars.bid_amt):\n            response.flash=\'Bid Accepted. ID is: \',form.vars.id\n            redirect(URL(\'user_home\'))\n            #else:\n             #   response.flash=\'Bid amount shoould be >  min bid amount\'\n                #return dict(form=form,ele_list=ele_list)\n        elif form.errors:\n            response.flash=\'Input has error\'\n        else:\n            response.flash=\'Please Fill the form\'\n        return dict(form=form,ele_list=ele_list)\n    else:\n        response.flash=\'You are selling and u cannot bid\'\n        return dict(form=form,ele_list=ele_list)\n@auth.requires_login()\ndef search_itembyid():\n    form=FORM(\'Tender ID:\',\n    INPUT(_name=\'name\', requires=IS_INT_IN_RANGE(1,1000)),INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        session.b=request.vars.name\n        redirect(URL(\'search_itembyid1\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef search_itembyid1():\n    tid=int(session.b)\n    uid=auth.user.id\n    tend_list= db((db.bidding.id==tid) &(db.bidding.UserID==uid)).select(db.bidding.ALL)\n    return dict(tend_list=tend_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef approve_tender():\n    tid=request.args(0)\n    sid=request.args(1)\n    db(db.bidding.item_id==sid).update(Status=\'Rejected\')\n    db(db.bidding.id ==tid).update(Status=\'Approved\')\n    db(db.item_info.id ==sid).update(Status=\'Work In Progress\')\n    tend_list= db(db.bidding.id==tid).select(db.bidding.ALL)\n    for e in tend_list:\n        val=e.UserID\n        pass\n    user_list=db(db.auth_user.id==val).select(db.auth_user.ALL)\n    for e in user_list:\n        val=e.email\n        pass\n    print val\n    mail = Mail()\n    mail.settings.server = \'smtp.gmail.com:587\'\n    mail.settings.sender = \'donotreply.tms1@gmail.com\'\n    mail.settings.tls = True\n    mail.settings.login = \'donotreply.tms1@gmail.com:tushujain\'\n    msg=\'Congratulations!!! your Tender ID \' +tid +\' has been approved. Contact respective office for further details\'\n    mail.send(val,\'Approval of tender\',msg)\n\n    session.b=tid\n    redirect(URL(\'adminshow_tender\'))\n    return dict(mid=mid)\n\ndef view_approvedtender():\n    sid=request.args(0)\n    ele_list= db(db.item_info.id==sid).select(db.item_info.ALL)\n    for e in ele_list:\n        ele_seller= db(db.auth_user.id==e.seller_id).select(db.auth_user.ALL)\n        ele_buyer= db(db.auth_user.id==e.buyers_id).select(db.auth_user.ALL)\n    return dict(ele_list=ele_list,ele_seller=ele_seller,ele_buyer=ele_buyer)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminshow_userdet():\n    user_list= db().select(db.auth_user.ALL)\n    return dict(user_list=user_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminshow_activity():\n    uid=request.args(0)\n    tend_list= db(db.bidding.UserID==uid).select(db.bidding.ALL)\n    return dict(tend_list=tend_list)\n\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminsearch_userbyid():\n    form=FORM(\'User ID:\',\n    INPUT(_name=\'name\', requires=IS_INT_IN_RANGE(1,1000)),INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        session.c=request.vars.name\n        redirect(URL(\'adminsearch_userbyid1\'))\n    elif form.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the Form\'\n    return dict(form=form)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminsearch_userbyid1():\n    id=int(session.c)\n    user_list= db(db.auth_user.id==id).select(db.auth_user.ALL)\n    return dict(user_list=user_list)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminsearch_userbyname():\n    form=FORM(\'User Name:\',\n    INPUT(_name=\'name\'),INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        session.d=request.vars.name\n        redirect(URL(\'adminsearch_userbyname1\'))\n    elif form.errors:\n        response.flash = \'Form has errors\'\n    else:\n        response.flash = \'Please fill the Form\'\n    return dict(form=form)\n\n@auth.requires(auth.user and auth.user.is_admin)\ndef adminsearch_userbyname1():\n    t=session.d\n    u_id=\'%\'+t+\'%\'\n    user_list= db(db.auth_user.first_name.like(u_id)).select(db.auth_user.ALL)\n    return dict(user_list=user_list)\n\n@auth.requires_login()\ndef usershow_myitems():\n    uid=auth.user.id\n    tend_list= db(db.item_info.seller_id==uid).select(db.item_info.ALL)\n    return dict(tend_list=tend_list)\n\n\n@auth.requires_login()\ndef usershow_mybids():\n    uid=auth.user.id\n    tend_list= db(db.bidding.UserID==uid).select(db.bidding.ALL)\n    return dict(tend_list=tend_list)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/reset_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(sell_an_item)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/siddharth/Desktop/Sace/Project/web2py/applications/iiitbid1/controllers/default.py", line 427, in <module>\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/siddharth/Desktop/Sace/Project/web2py/applications/iiitbid1/controllers/default.py", line 119, in sell_an_item\n    if form.process().accepted:\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/html.py", line 2301, in process\n    self.validate(**kwargs)\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/html.py", line 2238, in validate\n    if self.accepts(**kwargs):\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/sqlhtml.py", line 1711, in accepts\n    self.vars.id = self.table.insert(**fields)\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/packages/dal/pydal/objects.py", line 712, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/siddharth/Desktop/Sace/Project/web2py/gluon/packages/dal/pydal/objects.py", line 658, in _listify\n    \'Table: missing required field: %s\' % name)\nRuntimeError: Table: missing required field: minbidprice\n'
p11
s.